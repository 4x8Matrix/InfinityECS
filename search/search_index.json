{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is ECS? ECS stands for Entity-Component-System, an architecture designed for high performance & simplicity. ECS and OOP (Object-Orientated-Programming) share some of the same attributes, however ECS prioritises structure & data orientation There are thee factors when using an ECS system; Component: A property, state or value, as an example; we could add a Force Component to push an object. Entity: A collection of components, entities would be instances inside of the world. System: The logic used to compute what happens with Entity and it's collection of components What is Infinity? Infinity was built to be lightweight and follow the ECS architecture to the dot, when using this framework, your project will have structure and data definition. Infinity was also built with flexibility in mind, it runs in most variations of lua, being tested in the following, LuaJit Love Roblox Vanilla Support Links Discord : Discord Link Other Frameworks There are plenty of frameworks out there to help you design your experience, however, if you don't want to use Infinity, below is a list of frameworks that will help you design your game instead! Sleitnick/Knit [ Knit is a lightweight framework for Roblox that simplifies communication ... ] Sleitnick/AeroGameFramework [ AeroGameFramework is a Roblox game framework that makes development easy ... ] Quenty/NevermoreEngine [Nevermore is a ModuleScript loader for Roblox, and loads modules by name.] astrealRBLX/volt [ An intuitive and feature-packed Roblox game framework. ]","title":"Home"},{"location":"#what-is-ecs","text":"ECS stands for Entity-Component-System, an architecture designed for high performance & simplicity. ECS and OOP (Object-Orientated-Programming) share some of the same attributes, however ECS prioritises structure & data orientation There are thee factors when using an ECS system; Component: A property, state or value, as an example; we could add a Force Component to push an object. Entity: A collection of components, entities would be instances inside of the world. System: The logic used to compute what happens with Entity and it's collection of components","title":"What is ECS?"},{"location":"#what-is-infinity","text":"Infinity was built to be lightweight and follow the ECS architecture to the dot, when using this framework, your project will have structure and data definition. Infinity was also built with flexibility in mind, it runs in most variations of lua, being tested in the following, LuaJit Love Roblox Vanilla","title":"What is Infinity?"},{"location":"#support-links","text":"Discord : Discord Link","title":"Support Links"},{"location":"#other-frameworks","text":"There are plenty of frameworks out there to help you design your experience, however, if you don't want to use Infinity, below is a list of frameworks that will help you design your game instead! Sleitnick/Knit [ Knit is a lightweight framework for Roblox that simplifies communication ... ] Sleitnick/AeroGameFramework [ AeroGameFramework is a Roblox game framework that makes development easy ... ] Quenty/NevermoreEngine [Nevermore is a ModuleScript loader for Roblox, and loads modules by name.] astrealRBLX/volt [ An intuitive and feature-packed Roblox game framework. ]","title":"Other Frameworks"},{"location":"install/","text":"There are two supported ways to install InfinityECS, however you can also add Infinity as a Git Submodule for your project. both of the below methods require you to download the latest GitHub Releases Studio - rbxm binary Download the latest rbxm binary from releases Insert the rbxm into roblox studio Move the model into a suitable location Filesystem - zip archive Download the latest zip Archive from releases Extract the source folder from the Zip Archive into your workspace Rename the source folder to Infinity Git - submodule & rojo CLI Installation: git submodule add https://github.com/4x8Matrix/InfinityECS.git Rojo Configuration: \"ReplicatedStorage\": { ... \"InfinityECS\": { \"$path\": \"Submodules/InfinityECS/source\" }, ... }","title":"Installation"},{"location":"install/#studio-rbxm-binary","text":"Download the latest rbxm binary from releases Insert the rbxm into roblox studio Move the model into a suitable location","title":"Studio - rbxm binary"},{"location":"install/#filesystem-zip-archive","text":"Download the latest zip Archive from releases Extract the source folder from the Zip Archive into your workspace Rename the source folder to Infinity","title":"Filesystem - zip archive"},{"location":"install/#git-submodule-rojo","text":"CLI Installation: git submodule add https://github.com/4x8Matrix/InfinityECS.git Rojo Configuration: \"ReplicatedStorage\": { ... \"InfinityECS\": { \"$path\": \"Submodules/InfinityECS/source\" }, ... }","title":"Git - submodule &amp; rojo"},{"location":"classes/component/","text":"Component Class A component is one of the three elements that build the ECS architecture; This is a piece of data used to influence the behaviour of an entity, world or system. Properties Name ??? Id ??? Functions Destroy ??? Concat ??? Inc ??? Is ??? Iter ??? Set ??? Type ??? new ??? Code Example","title":"Component"},{"location":"classes/component/#component-class","text":"A component is one of the three elements that build the ECS architecture; This is a piece of data used to influence the behaviour of an entity, world or system.","title":"Component Class"},{"location":"classes/component/#properties","text":"","title":"Properties"},{"location":"classes/component/#name","text":"???","title":"Name"},{"location":"classes/component/#id","text":"???","title":"Id"},{"location":"classes/component/#functions","text":"","title":"Functions"},{"location":"classes/component/#destroy","text":"???","title":"Destroy"},{"location":"classes/component/#concat","text":"???","title":"Concat"},{"location":"classes/component/#inc","text":"???","title":"Inc"},{"location":"classes/component/#is","text":"???","title":"Is"},{"location":"classes/component/#iter","text":"???","title":"Iter"},{"location":"classes/component/#set","text":"???","title":"Set"},{"location":"classes/component/#type","text":"???","title":"Type"},{"location":"classes/component/#new","text":"???","title":"new"},{"location":"classes/component/#code-example","text":"","title":"Code Example"},{"location":"classes/componentBuilder/","text":"Component Builder Class The component builder class offers a flexible and easy way to build a multitude components; for example, this could be for bulk component generation or nested components in entity generation. Properties Id ??? Functions Build ??? Update ??? new ??? Code Example","title":"ComponentBuilder"},{"location":"classes/componentBuilder/#component-builder-class","text":"The component builder class offers a flexible and easy way to build a multitude components; for example, this could be for bulk component generation or nested components in entity generation.","title":"Component Builder Class"},{"location":"classes/componentBuilder/#properties","text":"","title":"Properties"},{"location":"classes/componentBuilder/#id","text":"???","title":"Id"},{"location":"classes/componentBuilder/#functions","text":"","title":"Functions"},{"location":"classes/componentBuilder/#build","text":"???","title":"Build"},{"location":"classes/componentBuilder/#update","text":"???","title":"Update"},{"location":"classes/componentBuilder/#new","text":"???","title":"new"},{"location":"classes/componentBuilder/#code-example","text":"","title":"Code Example"},{"location":"classes/entity/","text":"Entity Class An entity is one of the three elements that build the ECS architecture; They are the instances in your project. An entity instance is essentially a collection of components, binding multiple things together in order to create a more complicated object Properties Name ??? Id ??? Archetype ??? Components ??? Functions Destroy ??? Iter ??? AddComponent ??? AddComponents ??? RemoveComponent ??? RemoveComponents ??? GetComponentFromType ??? Extend ??? new ??? Code Sample","title":"Entity"},{"location":"classes/entity/#entity-class","text":"An entity is one of the three elements that build the ECS architecture; They are the instances in your project. An entity instance is essentially a collection of components, binding multiple things together in order to create a more complicated object","title":"Entity Class"},{"location":"classes/entity/#properties","text":"","title":"Properties"},{"location":"classes/entity/#name","text":"???","title":"Name"},{"location":"classes/entity/#id","text":"???","title":"Id"},{"location":"classes/entity/#archetype","text":"???","title":"Archetype"},{"location":"classes/entity/#components","text":"???","title":"Components"},{"location":"classes/entity/#functions","text":"","title":"Functions"},{"location":"classes/entity/#destroy","text":"???","title":"Destroy"},{"location":"classes/entity/#iter","text":"???","title":"Iter"},{"location":"classes/entity/#addcomponent","text":"???","title":"AddComponent"},{"location":"classes/entity/#addcomponents","text":"???","title":"AddComponents"},{"location":"classes/entity/#removecomponent","text":"???","title":"RemoveComponent"},{"location":"classes/entity/#removecomponents","text":"???","title":"RemoveComponents"},{"location":"classes/entity/#getcomponentfromtype","text":"???","title":"GetComponentFromType"},{"location":"classes/entity/#extend","text":"???","title":"Extend"},{"location":"classes/entity/#new","text":"???","title":"new"},{"location":"classes/entity/#code-sample","text":"","title":"Code Sample"},{"location":"classes/infinity/","text":"Infinity Class Infinity is the base class which ties together the different objects which make up the ECS architecture, to essentially put it simple; This is going to be the direct point of access for what Infinity has to offer. Info In the case of roblox, we have to make some slight changes to the initialization pipeline in order to maintain performance & simplicity. When ran inside of a roblox environment, things which you would have to implement yourself are no longer needed, this is what we do; Initiate a world object; re-define World in infinity to be this newly created world object. (In roblox, you never seem to have more than one world.) Initiate a RenderStepped or Stepped loop to call Infinity:Update() Properties IsRoblox Infinity.IsRoblox: Boolean True if the scripts environment is running under a roblox game instance Script Infinity.Script: userdata | nil If Infinity.IsRoblox is active then Infinity.Script will be a reference to the roblox script instance IsServer Infinity.IsServer: Boolean | nil If Infinity.IsRoblox is active then Infinity.IsServer then this will define if the framework is ran on the server or client. Classes World ??? Query ??? Service ??? Component ??? ComponentBuilder ??? EntityManager ??? Archetype ??? Entity ??? System ??? SystemController ??? Functions GetService ??? Update ??? Code Sample","title":"Infinity"},{"location":"classes/infinity/#infinity-class","text":"Infinity is the base class which ties together the different objects which make up the ECS architecture, to essentially put it simple; This is going to be the direct point of access for what Infinity has to offer. Info In the case of roblox, we have to make some slight changes to the initialization pipeline in order to maintain performance & simplicity. When ran inside of a roblox environment, things which you would have to implement yourself are no longer needed, this is what we do; Initiate a world object; re-define World in infinity to be this newly created world object. (In roblox, you never seem to have more than one world.) Initiate a RenderStepped or Stepped loop to call Infinity:Update()","title":"Infinity Class"},{"location":"classes/infinity/#properties","text":"","title":"Properties"},{"location":"classes/infinity/#isroblox","text":"Infinity.IsRoblox: Boolean True if the scripts environment is running under a roblox game instance","title":"IsRoblox"},{"location":"classes/infinity/#script","text":"Infinity.Script: userdata | nil If Infinity.IsRoblox is active then Infinity.Script will be a reference to the roblox script instance","title":"Script"},{"location":"classes/infinity/#isserver","text":"Infinity.IsServer: Boolean | nil If Infinity.IsRoblox is active then Infinity.IsServer then this will define if the framework is ran on the server or client.","title":"IsServer"},{"location":"classes/infinity/#classes","text":"","title":"Classes"},{"location":"classes/infinity/#world","text":"???","title":"World"},{"location":"classes/infinity/#query","text":"???","title":"Query"},{"location":"classes/infinity/#service","text":"???","title":"Service"},{"location":"classes/infinity/#component","text":"???","title":"Component"},{"location":"classes/infinity/#componentbuilder","text":"???","title":"ComponentBuilder"},{"location":"classes/infinity/#entitymanager","text":"???","title":"EntityManager"},{"location":"classes/infinity/#archetype","text":"???","title":"Archetype"},{"location":"classes/infinity/#entity","text":"???","title":"Entity"},{"location":"classes/infinity/#system","text":"???","title":"System"},{"location":"classes/infinity/#systemcontroller","text":"???","title":"SystemController"},{"location":"classes/infinity/#functions","text":"","title":"Functions"},{"location":"classes/infinity/#getservice","text":"???","title":"GetService"},{"location":"classes/infinity/#update","text":"???","title":"Update"},{"location":"classes/infinity/#code-sample","text":"","title":"Code Sample"},{"location":"classes/query/","text":"Query Class The query class is an object which can be used to collect entities within the world that contain certain components. This class is useful for going through a huge amount of entities in a world without having significant performance issues. the query class can return two types of arrays, strict arrays and non-strict arrays; Strict arrays will be entities which have only the components in demand, non-strict arrays are entities which have those components and more. Properties Id ??? Functions GetResult ??? Strict ??? Unstrict ??? Find ??? Filter ??? new ??? Code Example","title":"Query"},{"location":"classes/query/#query-class","text":"The query class is an object which can be used to collect entities within the world that contain certain components. This class is useful for going through a huge amount of entities in a world without having significant performance issues. the query class can return two types of arrays, strict arrays and non-strict arrays; Strict arrays will be entities which have only the components in demand, non-strict arrays are entities which have those components and more.","title":"Query Class"},{"location":"classes/query/#properties","text":"","title":"Properties"},{"location":"classes/query/#id","text":"???","title":"Id"},{"location":"classes/query/#functions","text":"","title":"Functions"},{"location":"classes/query/#getresult","text":"???","title":"GetResult"},{"location":"classes/query/#strict","text":"???","title":"Strict"},{"location":"classes/query/#unstrict","text":"???","title":"Unstrict"},{"location":"classes/query/#find","text":"???","title":"Find"},{"location":"classes/query/#filter","text":"???","title":"Filter"},{"location":"classes/query/#new","text":"???","title":"new"},{"location":"classes/query/#code-example","text":"","title":"Code Example"},{"location":"classes/service/","text":"Service Class A service is more of a standalone system; It's purpose is to provide you with ways to easily add functions & properties in world systems, for an example; You might want to create a Sound Service to manipulate and handle how sound would occur in your project. Info Using a system as a standalone service is very bad practice, a system is not designed for that usage, however, a service is. Functions new ??? Code Example","title":"Service"},{"location":"classes/service/#service-class","text":"A service is more of a standalone system; It's purpose is to provide you with ways to easily add functions & properties in world systems, for an example; You might want to create a Sound Service to manipulate and handle how sound would occur in your project. Info Using a system as a standalone service is very bad practice, a system is not designed for that usage, however, a service is.","title":"Service Class"},{"location":"classes/service/#functions","text":"","title":"Functions"},{"location":"classes/service/#new","text":"???","title":"new"},{"location":"classes/service/#code-example","text":"","title":"Code Example"},{"location":"classes/system/","text":"System Class An system is one of the three elements that build the ECS architecture; This class provides logic for the entities & components inside of the world. An example of this would be; Updating an AI Pathfinding Algorithm to push a block to the next point in 3D Space. Warning A system class needs to have a world; Without a world this system can no longer manipulate any entities or components It is very bad practice to create a system and use it as a service, api or an object to be used inside of Infinity. Properties Id ??? Functions PreUpdate ??? OnUpdate ??? PostUpdate ??? Bind ??? Fire ??? new ???","title":"System"},{"location":"classes/system/#system-class","text":"An system is one of the three elements that build the ECS architecture; This class provides logic for the entities & components inside of the world. An example of this would be; Updating an AI Pathfinding Algorithm to push a block to the next point in 3D Space. Warning A system class needs to have a world; Without a world this system can no longer manipulate any entities or components It is very bad practice to create a system and use it as a service, api or an object to be used inside of Infinity.","title":"System Class"},{"location":"classes/system/#properties","text":"","title":"Properties"},{"location":"classes/system/#id","text":"???","title":"Id"},{"location":"classes/system/#functions","text":"","title":"Functions"},{"location":"classes/system/#preupdate","text":"???","title":"PreUpdate"},{"location":"classes/system/#onupdate","text":"???","title":"OnUpdate"},{"location":"classes/system/#postupdate","text":"???","title":"PostUpdate"},{"location":"classes/system/#bind","text":"???","title":"Bind"},{"location":"classes/system/#fire","text":"???","title":"Fire"},{"location":"classes/system/#new","text":"???","title":"new"},{"location":"classes/world/","text":"World Class The world class is essentially a container for all systems, entities and components, the world class will push events, handle system clocks and manage the environment of your project. Imagine the world being a space, inside this space will be your systems & entities which work hand-in-hand together in order to achieve something. Another way of looking at a world, would be a Unity Scene, it allows you to store a package inside of one container, this container can then be manipulated in the future. Info If roblox is the environment the framework is being ran in, then the World class will be constructed during runtime of the Infinity Module. For more information please visit Classes -> Infinity Functions AddEntities ??? AddSystems ??? GetEntitiesFromArchetype ??? GetEntitiesFromComponents ??? GetEntitiesFromName ??? SetState ??? Push ??? Update ??? Destroy ??? new ??? Code Sample","title":"World"},{"location":"classes/world/#world-class","text":"The world class is essentially a container for all systems, entities and components, the world class will push events, handle system clocks and manage the environment of your project. Imagine the world being a space, inside this space will be your systems & entities which work hand-in-hand together in order to achieve something. Another way of looking at a world, would be a Unity Scene, it allows you to store a package inside of one container, this container can then be manipulated in the future. Info If roblox is the environment the framework is being ran in, then the World class will be constructed during runtime of the Infinity Module. For more information please visit Classes -> Infinity","title":"World Class"},{"location":"classes/world/#functions","text":"","title":"Functions"},{"location":"classes/world/#addentities","text":"???","title":"AddEntities"},{"location":"classes/world/#addsystems","text":"???","title":"AddSystems"},{"location":"classes/world/#getentitiesfromarchetype","text":"???","title":"GetEntitiesFromArchetype"},{"location":"classes/world/#getentitiesfromcomponents","text":"???","title":"GetEntitiesFromComponents"},{"location":"classes/world/#getentitiesfromname","text":"???","title":"GetEntitiesFromName"},{"location":"classes/world/#setstate","text":"???","title":"SetState"},{"location":"classes/world/#push","text":"???","title":"Push"},{"location":"classes/world/#update","text":"???","title":"Update"},{"location":"classes/world/#destroy","text":"???","title":"Destroy"},{"location":"classes/world/#new","text":"???","title":"new"},{"location":"classes/world/#code-sample","text":"","title":"Code Sample"},{"location":"internal/entityArchetype/","text":"The EntityArchetype is a combination of component types, every entity inside of your world will have an archetype account for it; The EntityManager handles the EntityArchetype relationship to Entity classes.","title":"EntityArchetype"},{"location":"internal/entityManager/","text":"The EntityManager's purpose is to provide a stable internal service to manage entities & their archetypes. Every time you initialise a new Entity or add new components to an entity, the entity manager will re-initialise that entities archetype","title":"EntityManager"},{"location":"internal/systemClock/","text":"In most cases, you will never have to use this class; however this is the class which helps to build asynchronous programming into the system, adding a ResumeIn function to yield, resume a thread after a threshold has been exceeded.","title":"SystemClock"},{"location":"internal/systemController/","text":"the system controller is what updates each system sequentially, this class handles and manages the heartbeat of infinity dependant on an FPS variable (Default FPS: 60) Properties Active ??? FPS ???","title":"SystemController"},{"location":"internal/systemController/#properties","text":"","title":"Properties"},{"location":"internal/systemController/#active","text":"???","title":"Active"},{"location":"internal/systemController/#fps","text":"???","title":"FPS"}]}